<?php

include_once('panopoly_magic.features.inc');

/**
 * Implementation of hook_apps_app_info()
 */
function panopoly_magic_apps_app_info() {
  return array(
    'configure form' => 'panopoly_magic_configure_form',
  );
}

/**
 * Configuration Form for Panopoly Magic
 */
function panopoly_magic_configure_form($form, &$form_state) {
  $form = array();

  $form['panopoly_magic_live_preview'] = array(
    '#title' => t('Live Preview'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Enabled',
      '0' => 'Disabled',
    ),
    '#default_value' => '1',
    '#description' => t('Do you want Panopoly to provide a live preview for modal content through the in place editor?'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter()
 */
function panopoly_magic_form_alter(&$form, &$form_state, $form_id) {

  /**
   * Globally remove the "Cancel" button from Panel pane edit forms
   */
  if (strpos($form_id, 'content_type_edit_form')) { 
    $form['buttons']['cancel']['#access'] = FALSE;
  }

  /**
   * Add a custom preview to the content type edit form and style edit form. This is applied in all cases, except for cases where
   * we are customizing an entity (i.e. fieldable panels panes) because we cannot reliable regenerate a preview without saving.
   */
  if (variable_get('panopoly_magic_live_preview', 1) && (strpos($form_id, '_content_type_edit_form') || $form_id == 'panels_edit_style_type_form')) {

    // Start the magic
    $pane = $form_state['pane'];
    $display = $form_state['display'];
    ctools_include('plugins', 'panels');
    ctools_include('content');

    // Determine the style
    if (strpos($form_id, '_content_type_edit_form')) {
      $style = (isset($pane->style['style'])) ? panels_get_style($pane->style['style']) : NULL;
    }
    elseif ($form_id == 'panels_edit_style_type_form') {
      $style = ($form_state['rebuild'] && $form_id == 'panels_edit_style_type_form') ? panels_get_style($form_state['values']['style']) : panels_get_style($form_state['style']);
    }
    else {
      $style = NULL;
    }

    // EXPERIEMENTAL: Handling Saving a Fieldable Panel Pane To Create a Live Preview. The trick 
    // here is to make sure we properly save a version to get a vid, but don't make it the real one.
    // NOTE - I doubt this will be very good for performance. Let's call it RC1. 
    if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' && $form_state['clicked_button']['#value'] == 'Update Preview') {

      // Make sure this will not be set as reusable
      $form_state['values']['reusable'] = NULL;

      // Run entity information through standard submission form
      fieldable_panels_panes_entity_edit_form_submit($form, $form_state);

      // Properly adjust the VID if we are dealing with an existing object
      if (!empty($form_state['entity']->old_vid)) {
        db_query("UPDATE {fieldable_panels_panes} SET vid = :vid WHERE fpid = :fpid", array(':vid' => $form_state['entity']->old_vid, ':fpid' => $form_state['entity']->fpid));
      }

      // Then tell Fieldable Panel Panes to render the correct version
      $pane->subtype = 'vid:' . $form_state['entity']->vid;
    }

    // Make some adjustments based on the way the sort ordering is being pased in
    // TODO - figure out why this is needed
    if (!empty($form_state['input']['sort_by'])) {
      $form_state['input']['exposed']['sort_by'] = $form_state['input']['sort_by'];
      $form_state['input']['exposed']['sort_order'] = $form_state['input']['sort_order'];
    }

    // Set the configuration and determine the content for the pane
    $configuration = ($form_state['rebuild'] && strpos($form_id, 'content_type_edit_form')) ? $form_state['input'] : $pane->configuration;
    $content = ctools_content_render($pane->type, $pane->subtype, $configuration);

    // Remove the clearfix for preview floating
    // TODO - investigate why Panels is putting this here in the first place
    if (isset($form['aligner_start'])) {
      $form['aligner_start']['#markup'] = str_replace('clearfix', '', $form['aligner_start']['#markup']);
    }

    // Create the preview fieldset
    if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' || $content) {
      $form['widget_preview'] = array(
        '#type' => 'fieldset',
        '#title' => 'Preview',
        '#attributes' => array('class' => array('widget-preview', 'widget-preview-single')),
        '#collapsible' => FALSE,
        '#weight' => -100,
      );

      $form['widget_preview']['preview'] = array(
        '#markup' => (!empty($style['render pane'])) ? theme($style['render pane'], array('content' => $content, 'pane' => $pane, 'display' => $display, 'style' => $style, 'settings' => $pane->style['settings'])) : theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display)),
      );

      // Create the preview refresh button
      $form['buttons']['preview'] = array(
        '#type' => 'button',
        '#value' => t('Update Preview'),
        '#wizard type' => 'next',
        '#attributes' => array('style' => 'display: none', 'class' => array('widget-preview-button', 'ctools-use-ajax', 'ctools-auto-submit-click')),
      );

      // Autosubmit the form
      ctools_add_js('auto-submit');
      $form['#attributes']['class'][] = 'ctools-auto-submit-full-form';
    }
  }

  /**
   * Add customization to panel pane style form
   */
  if ($form_id == 'panels_edit_style_type_form') {

    // Unset options for which we have no need
    unset($form['style']['#options']['block']);
    unset($form['style']['#options']['rounded_corners']);
    unset($form['style']['#options']['naked']);

    // Better explain that "No Style" means "Default Pane Style"
    // Move the default option to the top. Also I should have learned
    // how to manage arrays in PHP.
    if (!empty($form['style']['#options']['default'])) {
      $form['style']['#options']['default'] = t('Default Pane Style');
      $default = $form['style']['#options']['default'];
      unset($form['style']['#options']['default']);
      $form['style']['#options'] = array_reverse($form['style']['#options']);
      $form['style']['#options']['default'] = $default;
      $form['style']['#options'] = array_reverse($form['style']['#options']);
    }

    // Better title for the List Style region style plugin
    if (!empty($form['style']['#options']['list'])) {
      $form['style']['#options']['list'] = t('List Style');
    }

    // Improve the UI around region style selections
    if (!empty($form['style']['#options'][0])) {
      $form['style']['#options'][0] = t('Default Region Style');
      if (empty($form['style']['#default_value']) || $form['style']['#default_value'] == '-1') {
        $form['style']['#default_value'] = '0';
      }
      unset($form['style']['#options']['default']);
    }

    // Adding a fieldset around styling
    $form['style'] = array('style' => $form['style']);
    $form['style']['#type'] = 'fieldset';
    $form['style']['#title'] = t('Style Settings');
  }

  /**
   * Add customization to views panel pane settings form
   */
  if ($form_id == 'views_content_views_panes_content_type_edit_form') {

    // Get the configuration
    $conf = $form_state['conf'];

    // Better position context settings
    if (!empty($form['context'])) {
      $form['context_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Context Settings'),
      );
      $form['context_settings']['context'] = $form['context'];
      unset($form['context']);
    }

    // Better position page settings
    if (!empty($form['use_pager'])) {
      $form['display_settings']['use_pager'] = $form['use_pager'];
      $form['display_settings']['pager_id'] = $form['pager_id'];
      unset($form['use_pager']);
      unset($form['pager_id']);
    }


    // Add a widget title setting if views allows this to be customized
    if (!empty($form['override_title'])) {
      $form['override_title_markup']['#access'] = FALSE;
      $form['override_title']['#access'] = FALSE;
      $form['override_title_text']['#access'] = FALSE;
      $form['exposed']['widget_title'] = array(
        '#field_prefix' => t('Title'),
        '#type' => 'textfield',
        '#size' => 30,
        '#weight' => -100,
        '#attributes' => (empty($conf['widget_title']) || empty($form_state['view']->display_handler->options['title'])) ? array('placeholder' => '<No Title>') : array(),
        '#default_value' => (isset($conf['widget_title'])) ? $conf['widget_title'] : $form_state['view']->display_handler->options['title'],
      );
    }

    // Adjust the sort options
    if (!empty($form['exposed']['sort_order'])) {
      $form['exposed']['sort_order']['#title'] = t('Sort order');
      $form['exposed']['sort_order']['#suffix'] = '<div class="clearfix"></div>';
      $form['exposed']['sort_order']['#weight'] = 9;
      $form['display_settings']['sort_order'] = $form['exposed']['sort_order'];
      unset($form['exposed']['sort_order']);
    }
    if (!empty($form['exposed']['sort_by'])) {
      $form['exposed']['sort_by']['#prefix'] = '<div class="clearfix"></div>';
      $form['exposed']['sort_by']['#weight'] = 8;
      $form['display_settings']['sort_by'] = $form['exposed']['sort_by'];
      unset($form['exposed']['sort_by']);
    }

    // Switch all exposed filters to use field_prefix display
    foreach($form['exposed'] as $filter => $filter_array) {
      if (!empty($form['exposed'][$filter]['#title']) && empty($form['exposed'][$filter]['#field_prefix'])) {
        $form['exposed'][$filter]['#field_prefix'] = $form['exposed'][$filter]['#title'];
        unset($form['exposed'][$filter]['#title']);
      }
    }

    // Switch all display_settings filters to use field_prefix display
    foreach($form['display_settings'] as $filter => $filter_array) {
      if (!empty($form['display_settings'][$filter]['#title']) && empty($form['display_settings'][$filter]['#field_prefix'])) {
        $form['display_settings'][$filter]['#field_prefix'] = $form['display_settings'][$filter]['#title'];
        unset($form['display_settings'][$filter]['#title']);
      }
    }

    // Move items per page wiget to widget area
    if (isset($form['items_per_page'])) {
      $form['items_per_page']['#field_prefix'] = $form['items_per_page']['#title'];
      $form['items_per_page']['#title'] = '';
      $form['items_per_page']['#weight'] = -90;
      $form['display_settings']['items_per_page'] = $form['items_per_page'];
      unset($form['items_per_page']);
    }

    // Update field setting options
    if (isset($form['fields_override'])) {
      $form['fields_override']['#title'] = t('Field Settings');
      $form['fields_override']['#collapsible'] = FALSE;
      foreach($form['fields_override'] as &$field) {
        if (is_array($field)) {
          $field['#title'] = t('Display') . ' ' . $field['#title'];
        }
      }
    }

    // Define a general settings fieldset if we have exposed values
    if (!empty($form['exposed']) && count($form['exposed']) > 1) {
      $form['exposed']['#type'] = 'fieldset';
      $form['exposed']['#title'] = t('General Settings');
      $form['exposed']['#weight'] = -30;
    }

    // Define a display settings fieldset if we have display options
    if (!empty($form['display_settings']) && count($form['display_settings']) > 0) {
      $form['display_settings']['#type'] = 'fieldset';
      $form['display_settings']['#title'] = t('Display Settings');
      $form['display_settings']['#weight'] = -29;
    }

    // Determine if this is a node view.
    $view_handler = $form_state['view']->display_handler;
    $node_view = ($view_handler->options['row_plugin'] == 'node' && in_array($view_handler->options['style_plugin'], array('default'))) ? TRUE : FALSE;

    if ($node_view == FALSE) {
      if (empty($conf['view_settings'])) {
        $conf['view_settings'] = 'fields';
      }

      // Create the Display Settings fieldset if needed
      if (empty($form['display_settings'])) {
        $form['display_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Display Settings'),
          '#weight' => -29,
        );
      }

      // Add information about the View Mode
      $form['display_settings']['view_settings'] = array(
        '#type' => 'radios',
        '#prefix' => '<div class="view-settings-wrapper"><span class="field-prefix">' . t('Display Type') . '</span>',
        '#suffix' => '</div>',
        '#default_value' => $conf['view_settings'],
        '#weight' => 10,
        '#options' => array(
          'fields' => t('Fields'),
          'nodes' => t('Content'),
        ),
      );

      // Update the field overrides to be dependent on the view settings selection.
      $form['fields_override']['#states'] = array(
        'visible' => array(
          ':input[name="view_settings"]' => array('value' => 'fields'),
        ),
      );
    }

    // Add the style setting fieldset in any case
    $form['content_settings'] = array(
      '#type' => 'fieldset',
      '#title' => 'Content Settings',
    );

    // Add specific style options.
    $form['content_settings']['view_mode'] = array(
      '#type' => 'radios',
      '#options' => panopoly_core_view_mode_options(),
      '#default_value' => $conf['view_mode'] ? $conf['view_mode'] : 'teaser',
      '#states' => array(
        'visible' => array(
          ':input[name="view_settings"]' => array('value' => 'nodes'),
        ),
      ),
    );  

    // Override context settings if there is only one option.
    if (!empty($form['context_settings']['context'])) {
      $show_fieldset = FALSE;
      foreach (element_children($form['context_settings']['context']) as $child) {
        // If the element has only one option, just hide the field.
        if (empty($form['context_settings']['context'][$child]['#options']) || count($form['context_settings']['context'][$child]['#options']) < 2) {
          $form['context_settings']['context'][$child]['#type'] = 'hidden';
        }
        else {
          // We should show the fieldset if at least one sub element has multiple options.
          $show_fieldset = TRUE;
        }
      }

      if (empty($show_fieldset)) {
        $form['context_settings']['#type'] = 'hidden';
      }
    }

    // Add a custom submit handler to our preview and submit option
    $form['#submit'][] = 'panopoly_magic_views_content_type_modal_submit';
    $form['buttons']['preview']['#submit'][] = 'panopoly_magic_views_content_type_modal_submit';
  }

  /**
   * Override default entity view mode behavior for fieldable panel panes.
   */
  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {

    // Handle the view mode
    $view_mode = $form['view_mode'];
    unset($form['view_mode']);

    // Remove "tokens" from the list of available view modes.
    if (!empty($view_mode['#options']['token'])) {
      unset($view_mode['#options']['token']);
    }

    // If we're left with only one option, don't display the dropdown.
    if (count($view_mode['#options']) < 2) {
      $view_type = reset(array_keys($view_mode['#options']));
      $view_mode = array(
        '#type' => 'value',
        '#value' => $view_type,
      );
    }

    // Re-insert the view mode selection under the "General settings" fieldset.
    $form['widget_settings']['view_mode'] = $view_mode;
  }

  /**
   * Override the sizing on fields in the Fieldable Panel Panes modal for better UI
   */
  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {
    if (!empty($form['widget_settings']['title'])) {
      $form['widget_settings']['title']['#size'] = '';
    }
    if (!empty($form['widget_settings']['link']['path'])) {
      $form['widget_settings']['link']['path']['#size'] = '40';
    }
  }

  /**
   * Globally make sure that all options are inside a fieldset. Currently just supporting a known list
   * of forms, but persumably this can be applied to all items
   */
  if (in_array($form_id, array('panopoly_search_search_box_content_type_edit_form', 'menu_block_menu_tree_content_type_edit_form', 'ctools_node_content_content_type_edit_form'))) {

    // Grab child elements and create the fieldset.
    $children = element_children($form);
    if (count($children) > 1) {
      $form['general_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('General Settings'),
        '#weight' => -30,
      );

      // Move all elements which aren't fieldsets or the submit buttons into the general settings fieldset.
      foreach ($children as $child) {
        if (!empty($form[$child]['#type']) && $form[$child]['#type'] != 'fieldset' && $child != 'buttons') {
          $form['general_settings'][$child] = $form[$child];
          unset($form[$child]);
        }
      }
    }
  }
}

/**
 * Custom submit handler to save panels pane configuration for styling
 */
function panopoly_magic_views_content_type_modal_submit(&$form, &$form_state) {
  $form_state['conf']['view_mode'] = (isset($form_state['values']['view_mode'])) ? $form_state['values']['view_mode'] : NULL;

  // Set the $conf['widget_title'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't. 
  if (isset($form_state['values']['exposed']['widget_title'])) {
    $form_state['conf']['widget_title'] = $form_state['values']['exposed']['widget_title'];
  }
  elseif (isset($form_state['values']['widget_title'])) {
    $form_state['conf']['widget_title'] = $form_state['values']['widget_title'];
  }
  else {
    $form_state['conf']['widget_title'] = NULL;
  }

  // Set the $conf['items_per_page'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't. 
  if (isset($form_state['values']['exposed']['items_per_page'])) {
    $form_state['conf']['items_per_page'] = $form_state['values']['exposed']['items_per_page'];
  }
  elseif (isset($form_state['values']['items_per_page'])) {
    $form_state['conf']['items_per_page'] = $form_state['values']['items_per_page'];
  }
  else {
    $form_state['conf']['items_per_page'] = NULL;
  }

  // Set the $conf['sort_by'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't. 
  if (isset($form_state['values']['display_settings']['sort_by'])) {
    $form_state['conf']['exposed']['sort_by'] = $form_state['values']['display_settings']['sort_by'];
  } 
  elseif (isset($form_state['values']['sort_by'])) {
    $form_state['conf']['exposed']['sort_by'] = $form_state['values']['sort_by'];
  }   
  else {
    $form_state['conf']['exposed']['sort_by'] = NULL;
  } 

  // Set the $conf['sort_order'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't. 
  if (isset($form_state['values']['display_settings']['sort_order'])) {
    $form_state['conf']['exposed']['sort_order'] = $form_state['values']['display_settings']['sort_order'];
  } 
  elseif (isset($form_state['values']['sort_order'])) {
    $form_state['conf']['exposed']['sort_order'] = $form_state['values']['sort_order'];
  }   
  else {
    $form_state['conf']['exposed']['sort_order'] = NULL;
  } 

  // Save the view settings field is present in the data.
  if (isset($form_state['values']['view_settings'])) {
    $form_state['conf']['view_settings'] = $form_state['values']['view_settings'];
  }
}

/**
 * Implementation of hook_views_pre_render()
 */
function panopoly_magic_views_pre_render(&$view) {
  if (isset($view->display_handler->options['pane_conf'])) {
    $conf = $view->display_handler->options['pane_conf'];

    // Set the view title depending on where it comes. We do this a little
    // funky since sometimes it comes inside of $form_state['values'] and 
    // sometimes it doesn't.
    if (isset($conf['widget_title']) || isset($conf['exposed']['widget_title'])) {
      $view->display_handler->options['title'] = (isset($conf['exposed']['widget_title'])) ? $conf['exposed']['widget_title'] : $conf['widget_title']; 
      $view->build_info['title'] = (isset($conf['exposed']['widget_title'])) ? $conf['exposed']['widget_title'] : $conf['widget_title']; 
    }

    // Determine that this was previously a field view, which has been overridden to a node view in the pane config.
    if (!empty($conf['view_settings']) && $conf['view_settings'] == 'nodes' && empty($view->style_plugin->row_plugin->nodes)) {
     
      // Reconstruct the nodes array which a node row style expects.
      if (!empty($view->result)) {
        $nids = array();
        foreach ($view->result as $result) {
          $nids[] = $result->nid;
        }
        $nodes = node_load_multiple($nids);
      }

      // Change the row plugin.
      if (!empty($nodes)) {
        $view->style_plugin->row_plugin = views_get_plugin('row', 'node');
        $view->style_plugin->row_plugin->view =& $view;
        $view->style_plugin->row_plugin->display =& $view->display_handler->display;
        $view->style_plugin->row_plugin->field_alias = 'nid';
        $view->style_plugin->row_plugin->nodes = $nodes;
      }
    }

    // Set the view mode
    if (isset($conf['view_mode'])) {
      $view->style_plugin->row_plugin->options['view_mode'] = $conf['view_mode'];
    }
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function panopoly_magic_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['panopoly_magic'];
    unset($implementations['panopoly_magic']);
    $implementations['panopoly_magic'] = $group;
  }
}


/**
 * Preprocess the panels_ipe_toolbar to change text for IPE buttons
 */
function panopoly_magic_preprocess_panels_ipe_toolbar(&$vars) {
  foreach($vars['buttons'] as $panel_context_id => $panel_context) {
    foreach($panel_context as $button_name => $button) {
      switch($button_name) {
        case 'panels-ipe-startedit':
          $vars['buttons'][$panel_context_id][$button_name]['#title'] = 'Customize this page';
          break;
        case 'panels-ipe-change-layout':
          $vars['buttons'][$panel_context_id][$button_name]['#title'] = 'Change this layout';
          break;
      }
    }
  }
}

/**
 * Preprocess the panels_add_content_modal() function to add the HTML for the preview
 */
function panopoly_magic_preprocess_panels_add_content_modal(&$vars) {
  // Generate the pane preview
  if (!empty($vars['categories'][$vars['category']]['content'])) {
    foreach($vars['categories'][$vars['category']]['content'] as &$plugin) {
      $pane = panels_new_pane($plugin['type_name'], $plugin['subtype_name'], TRUE);
      $display = $vars['renderer']->display;
      $context = $vars['renderer']->display->context;
      $args = $vars['renderer']->display->args;
      $incoming_content = $vars['renderer']->display->incoming_content;
      $keywords = (!empty($vars['renderer']->display->keywords)) ? $vars['renderer']->display->keywords : array();
      if ($content = ctools_content_render($pane->type, $pane->subtype, $pane->configuration, $keywords, $args, $context, $incoming_content)) {
        $plugin['preview'] = theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display));
      }
    }
  }
}

/** 
 * Process the panels_add_content_modal() to adjust the markup to present the preview
 */
function panopoly_magic_process_panels_add_content_modal(&$vars) {
  $content = !empty($vars['categories'][$vars['category']]['content']) ? $vars['categories'][$vars['category']]['content'] : array();

  // If no category is selected or the category is empty or our special empty
  // category render a 'header' that will appear instead of the columns.
  if (empty($vars['category']) || empty($content) || $vars['category'] == 'root') {
    // Nothing to do since there is no preview
  }
  else {
    $titles = array_keys($content);
    natcasesort($titles);
    $col_size = count($titles) / $vars['column_count'];

    // Zero out the existing column data
    $count = 0;
    foreach ($titles as $title) {
      $which = floor($count++ / $col_size) + 1;
      $vars['columns'][$which] = '';
    }

    // Readd the column data with our preview functionality
    $count = 0;
    foreach ($titles as $title) {
      $which = floor($count++ / $col_size) + 1;
      $content[$title]['title'] = 'Add';
      $vars['columns'][$which] .= '<fieldset class="widget-preview"><legend><div class="widget-preview-title">' .  theme('panels_add_content_link', array('renderer' => $vars['renderer'], 'region' => $vars['region'], 'content_type' => $content[$title])) . '</div><span class="fieldset-legend">' . $title . '</span></legend><div class="fieldset-wrapper">' . $content[$title]['preview'] . '</div></fieldset>';
    }
  }
}
